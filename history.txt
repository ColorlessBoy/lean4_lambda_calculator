def Prop = Sort(0)
def Imp = (a:Prop)=>(b:Prop)=>(a->b)
def Iff : Prop -> Prop -> Prop
def Iff.intro : (a:Prop)->(b:Prop)->(a->b)->(b->a)->Iff a b
def Iff.mp : (a:Prop)->(b:Prop)->Iff a b->a->b
def Iff.mpr: (a:Prop)->(b:Prop)->Iff a b->b->a
thm Iff.refl : (a:Prop)->Iff a a
  (a:Prop)=>Iff.intro a a
  (a:Prop)=>(h: a->a)=>h
  (a:Prop)=>(h:a)=>h
def And : Prop -> Prop -> Prop
def And.intro : (a:Prop)->(b:Prop)->a->b->And a b
def And.left : (a:Prop)->(b:Prop)->And a b->a
def And.right : (a:Prop)->(b:Prop)->And a b->b
def Or : Prop -> Prop -> Prop
def Or.inl : (a:Prop)->(b:Prop)->a->Or a b
def Or.inr : (a:Prop)->(b:Prop)->b->Or a b
def Or.rec : (a : Prop) -> (b : Prop) -> (motive : Or a b -> Prop) -> ((ha : a) -> motive (Or.inl a b ha)) -> ((hb : b) -> motive (Or.inr a b hb)) -> (h : Or a b) -> motive h
thm Or.elim : (a:Prop)->(b:Prop)->(c:Prop)->Or a b->(a->c)->(b->c)->c
  (a : Prop) => (b : Prop) => (c : Prop) => (h1 : Or a b) => (h2 : a -> c) => (h3 : b -> c) => Or.rec a b (Or a b => c) h2 h3 h1  
def False : Prop
def False.rec : (a:False->Sort(u))->(b:False)->(a b)
def False.elim = (a:Sort(u))=>(b:False)=>False.rec (False=>a) b
def True : Prop
def True.intro : True
def True.rec : (a:True->Sort(u))->(a True.intro)->(c:True)->a c
def Not = (a:Prop)=>(a->False) 
def id = Sort(u)=>(a:#0)=>a
thm absurd : (a: Prop) -> (b: Sort(u)) -> (h1: a) -> (h2: Not a) -> b
  (a: Prop) => (b: Sort(u)) => (h1 : a) => (h2 : Not a) => False.elim b 
  (a : Prop) => (b : Sort(u)) => (h1 : a) => (h2 : Not a) => h2 h1
def Eq : (a : Sort(u)) -> a -> a -> Prop
def Eq.refl : (a : Sort(u)) -> (b : a) -> Eq a b b
def Eq.rec : (a : Sort(u_1)) -> (b : a) -> (motive : (x : a) -> Eq a b x -> Sort(u)) -> motive b (Eq.refl a b) -> (c : a) -> (t: Eq a b c) -> motive c t
thm Eq.symm : (a: Sort(u)) -> (x : a) -> (y : a) -> Eq a x y -> Eq a y x
  (a : Sort(u)) => (x : a) => (y : a) => Eq a x y => Eq.rec a x ((b : a) => Eq a x b => Eq a b x) (Eq.refl a x) y #0  
thm Eq.trans : (a : Sort(u)) -> (x : a) -> (y : a) -> (z : a) -> Eq a x y -> Eq a y z -> Eq a x z 
  (a : Sort(u)) => (x : a) => (y : a) => (z : a) => Eq a x y => Eq a y z => Eq.rec a y ((b : a) => Eq a y b => Eq a x b) #1 z #0
thm Or.resolve_left : (a : Prop) -> (b : Prop) -> (h : Or a b) -> (na : Not a) -> b 
  (a : Prop) => (b : Prop) => (h : Or a b) => (na : Not a) => Or.elim a b b h
  (a : Prop) => (b : Prop) => (h : Or a b) => (na : Not a) => (a -> b) => id b
  (a : Prop) => (b : Prop) => (h : Or a b) => (na : Not a) => a => absurd a b #0 na
thm Or.resolve_right : (a : Prop) -> (b : Prop) -> (h : Or a b) -> (nb : Not b) -> a
  (a : Prop) => (b : Prop) => (h : Or a b) => (nb : Not b) => Or.elim a b a h
  (a : Prop) => (b : Prop) => (h : Or a b) => (nb : Not b) => (a -> a) => b => absurd b a #0 nb
  (a : Prop) => (b : Prop) => (h : Or a b) => (nb : Not b) => id a
thm Or.neg_resolve_left : (a : Prop) -> (b : Prop) -> (h : Or (Not a) b) -> (ha : a) -> b
  (a : Prop) => (b : Prop) => (h : Or (Not a) b) => (ha : a) => Or.elim (Not a) b b h 
  (a : Prop) => (b : Prop) => (h : Or (Not a) b) => (ha : a) => (Not a -> b) => id b
  (a : Prop) => (b : Prop) => (h : Or (Not a) b) => (ha : a) => Not a => absurd a b ha #0
thm Or.neg_resolve_right : (a : Prop) -> (b : Prop) -> (h : Or a (Not b)) -> (hb : b) -> a
  (a : Prop) => (b : Prop) => (h : Or a (Not b)) => (hb : b) => Or.elim a (Not b) a h
  (a : Prop) => (b : Prop) => (h : Or a (Not b)) => (hb : b) => (a -> a) => Not b => absurd b a hb #0
  (a : Prop) => (b : Prop) => (h : Or a (Not b)) => (hb : b) => a => #0
thm Iff.of_eq : (a : Prop) -> (b : Prop) -> Eq Prop a b -> Iff a b
  (a : Prop) => (b : Prop) => (h : Eq Prop a b) => Eq.rec Prop a ((c : Prop) => Eq Prop a c => Iff a c) (Iff.refl a) b h 
thm Iff.trans : (a : Prop) -> (b : Prop) -> (c : Prop) -> (h1 : Iff a b) -> (h2 : Iff b c) -> Iff a c
  (a : Prop) => (b : Prop) => (c : Prop) => (h1 : Iff a b) => (h2 : Iff b c) => Iff.intro a c
  (a : Prop) => (b : Prop) => (c : Prop) => (h1 : Iff a b) => (h2 : Iff b c) => (a -> c) => c => Iff.mpr a b h1
  (a : Prop) => (b : Prop) => (c : Prop) => (h1 : Iff a b) => (h2 : Iff b c) => (a -> c) => Iff.mpr b c h2
  (a : Prop) => (b : Prop) => (c : Prop) => (h1 : Iff a b) => (h2 : Iff b c) => a => Iff.mp b c h2
  (a : Prop) => (b : Prop) => (c : Prop) => (h1 : Iff a b) => (h2 : Iff b c) => Iff.mp a b h1
thm Eq.comm : (a : Sort(u)) -> (x : a) -> (y : a) -> Iff (Eq a x y) (Eq a y x)
  (a : Sort(u)) => (x : a) => (y : a) => Iff.intro (Eq a x y) (Eq a y x)
  (a : Sort(u)) => (x : a) => (y : a) => (Eq a x y -> Eq a y x) => Eq.symm a y x
  (a : Sort(u)) => (x : a) => (y : a) => Eq.symm a x y
thm Iff.symm : (a : Prop) -> (b : Prop) -> Iff a b -> Iff b a 
  (a : Prop) => (b : Prop) => Iff a b => Iff.intro b a
  (a : Prop) => (b : Prop) => Iff a b => (b -> a) => Iff.mp a b #1
  (a : Prop) => (b : Prop) => Iff a b => Iff.mpr a b #0
thm Iff.comm : (a : Prop) -> (b : Prop) -> Iff (Iff a b) (Iff b a)
  (a : Prop) => (b : Prop) => Iff.intro (Iff a b) (Iff b a)
  (a : Prop) => (b : Prop) => (Iff a b -> Iff b a) => Iff.symm b a
  (a : Prop) => (b : Prop) => Iff.symm a b
thm And.symm : (a : Prop) -> (b : Prop) -> And a b -> And b a 
  (a : Prop) => (b : Prop) => And a b => And.intro b a
  (a : Prop) => (b : Prop) => And a b => b => And.left a b #1
  (a : Prop) => (b : Prop) => And a b => And.right a b #0
thm And.comm : (a : Prop) -> (b : Prop) -> Iff (And a b) (And b a) 
  (a : Prop) => (b : Prop) => Iff.intro (And a b) (And b a)
  (a : Prop) => (b : Prop) => (And a b -> And b a) => And.symm b a
  (a : Prop) => (b : Prop) => And.symm a b
thm Or.symm : (a : Prop) -> (b : Prop) -> Or a b -> Or b a
  (a : Prop) => (b : Prop) => Or.elim a b (Or b a) 
  (a : Prop) => (b : Prop) => Or a b => (a -> Or b a) => b => Or.inl b a #0
  (a : Prop) => (b : Prop) => Or a b => a => Or.inr b a #0
thm Or.comm : (a : Prop) -> (b : Prop) -> Iff (Or a b) (Or b a) 
  (a : Prop) => (b : Prop) => Iff.intro (Or a b) (Or b a)
  (a : Prop) => (b : Prop) => (Or a b -> Or b a) => Or.symm b a
  (a : Prop) => (b : Prop) => Or.symm a b
def Forall = (a:Sort(u))=>(b:a->Prop)=>((c:a)->b c)
def Exists : (a:Sort(u))->(a->Prop)->Prop
def Exists.intro : (a:Sort(u))->(h:a->Prop)->(x:a)->h x->Exists a h
def Exists.rec : (a:Sort(u))->(motive:a->Prop)->(h1:Exists a motive->Prop)->((x:a)->(h2:motive x)-> h1 (Exists.intro a motive x h2))->(h3:Exists a motive)->h1 h3
thm Exists.elim : (a:Sort(u))->(h:a->Prop)->(b:Prop)->Exists a h->((x:a)->h x->b)->b
  (a : Sort(u)) => (h : a -> Prop) => (b : Prop) => Exists a h => ((x : a) -> h x -> b) => Exists.rec a h (Exists a h => b) #0 #1 
def Decidable : Prop -> Sort(1)
def Decidable.isTrue : (a : Prop) -> a -> Decidable a
def Decidable.isFalse : (a : Prop) -> Not a -> Decidable a
def Decidable.rec : (a:Prop)->(h:Decidable a)->(motive:Decidable a->Sort(u))->((h1:Not a)->motive (Decidable.isFalse a h1))->((h2 : a)->motive (Decidable.isTrue a h2))->motive h
thm Decidable.em : (a:Prop)->Decidable a->Or a (Not a)
  (a : Prop) => (h : Decidable a) => Decidable.rec a h (Decidable a => Or a (Not a))
  (a : Prop) => (h : Decidable a) => ((h1 : Not a) -> Or a (Not a)) => Or.inl a (Not a)
  (a : Prop) => (h : Decidable a) => Or.inr a (Not a)
thm Decidable.byContradiction : (a:Prop)->Decidable a->(Not a->False)->a
  (a : Prop) => (h:Decidable a) => (nna : Not a -> False) => Decidable.rec a h (Decidable a=>a)
  (a : Prop) => (h : Decidable a) => (nna : Not a -> False) => ((h1 : Not a) -> a) => (h2 : a) => h2
  (a : Prop) => (h : Decidable a) => (nna : Not a -> False) => (h1 : Not a) => False.elim a (nna h1) 
thm Decidable.of_not_not : (a:Prop)->Decidable a->Not (Not a)->a
  (a : Prop) => Decidable a => Not (Not a) => Decidable.byContradiction a #1
  (a : Prop) => Decidable a => Not (Not a) => Not a => #1 #0
thm Decidable.not_and_to_or_not : (p:Prop)->(q:Prop)->(Decidable p)->(Decidable q)->Not (And p q)->Or (Not p) (Not q)
  (p : Prop) => (q : Prop) => (hp : Decidable p) => (hq : Decidable q) => Not (And p q) => Decidable.rec p hp (Decidable p => Or (Not p) (Not q)) 
  (p : Prop) => (q : Prop) => (hp : Decidable p) => (hq : Decidable q) => Not (And p q) => ((h1 : Not p) -> Or (Not p) (Not q)) => (h2 : p) => Decidable.rec q hq (Decidable q => Or (Not p) (Not q))
  (p : Prop) => (q : Prop) => (hp : Decidable p) => (hq : Decidable q) => Not (And p q) => ((h1 : Not p) -> Or (Not p) (Not q)) => (h2 : p) => ((h1 : Not q) -> Or (Not p) (Not q)) => (h2 : q) => absurd (And p q) (Or (Not p) (Not q)) 
  (p : Prop) => (q : Prop) => (hp : Decidable p) => (hq : Decidable q) => Not (And p q) => ((h1 : Not p) -> Or (Not p) (Not q)) => (h2 : p) => ((h1 : Not q) -> Or (Not p) (Not q)) => (h2 : q) => And p q => #5
  (p : Prop) => (q : Prop) => (hp : Decidable p) => (hq : Decidable q) => Not (And p q) => ((h1 : Not p) -> Or (Not p) (Not q)) => (h2 : p) => ((h1 : Not q) -> Or (Not p) (Not q)) => (h2 : q) => And.intro p q #2 h2
  (p : Prop) => (q : Prop) => (hp : Decidable p) => (hq : Decidable q) => Not (And p q) => ((h1 : Not p) -> Or (Not p) (Not q)) => (h2 : p) => (h1 : Not q) => Or.inr (Not p) (Not q) h1
  (p : Prop) => (q : Prop) => (hp : Decidable p) => (hq : Decidable q) => Not (And p q) => (h1 : Not p) => Or.inl (Not p) (Not q) h1
def propext : (a:Prop)->(b:Prop)->Iff a b->Eq Prop a b
thm Not.elim : (a:Prop)->(b:Sort(u))->Not a->a->b
  (a : Prop) => (b : Sort(u)) => Not a => a => absurd a b #0 #1
thm And.elim: (a:Prop)->(b:Prop)->(c:Sort(u))->(f:a->b->c)->(h:And a b)->c
  (a : Prop) => (b : Prop) => (c : Sort(u)) => (f : a -> b -> c) => (h : And a b) => f (And.left a b h) (And.right a b h)
thm Iff.elim: (a:Prop)->(b:Prop)->(c:Sort(u))->(f:(a->b)->(b->a)->c)->Iff a b->c
  (a : Prop) => (b : Prop) => (c : Sort(u)) => (f : (a -> b) -> (b -> a) -> c) => (h : Iff a b) => f (Iff.mp a b h) (Iff.mpr a b h)
thm Eq.subst : (a:Sort(u))->(motive:a->Prop)->(x:a)->(y:a)->Eq a x y->motive x->motive y
  (a : Sort(u)) => (motive : a -> Prop) => (x : a) => (y : a) => Eq a x y => motive x => Eq.rec a x ((z:a)=>Eq a x z=>motive z) #0 y #1
thm Iff.subst : (a:Prop)->(b:Prop)->(p:Prop->Prop)->Iff a b->p a->p b
  (a : Prop) => (b : Prop) => (p : Prop -> Prop) => Iff a b => Eq.subst Prop p a b 
  (a : Prop) => (b : Prop) => (p : Prop -> Prop) => propext a b
thm Not.intro : (a:Prop)->(h:a->False)->Not a
  (a : Prop) => (h : a -> False) => h
thm mt : (a:Prop)->(b:Prop)->(h1:a->b)->(h2:Not b)->Not a
  (a : Prop) => (b : Prop) => (h1 : a -> b) => (h2 : Not b) => (h3 : a) => h2 (h1 h3)
thm Not.imp : (a:Prop)->(b:Prop)->(h1:Not b)->(h2:a->b)->Not a
  (a : Prop) => (b : Prop) => (h1 : Not b) => (h2 : a -> b) => mt a b h2 h1
thm not_congr : (a:Prop)->(b:Prop)->Iff a b->Iff (Not a) (Not b)
  (a : Prop) => (b : Prop) => Iff a b => Iff.intro (Not a) (Not b)
  (a : Prop) => (b : Prop) => Iff a b => (Not a -> Not b) => mt a b 
  (a : Prop) => (b : Prop) => Iff a b => (Not a -> Not b) => Iff.mp a b #1
  (a : Prop) => (b : Prop) => Iff a b => mt b a
  (a : Prop) => (b : Prop) => Iff a b => Iff.mpr a b #0
thm not_not_intro : (p:Prop)->(h:p)->Not (Not p)
  (p : Prop) => (h : p) => (np : Not p) => np h
thm not_false : Not False 
  id False
thm not_not_not : (a : Prop)->Iff (Not(Not(Not(a)))) (Not a)
  (a : Prop) => Iff.intro (Not (Not (Not a))) (Not a)
  (a : Prop) => (Not (Not (Not a)) -> Not a) => Not a => not_not_intro (Not a) #0
  (a : Prop) => mt a (Not (Not a))
  not_not_intro
thm iff_of_true : (a:Prop)->(b:Prop)->(ha:a)->(hb:b)->Iff a b
  (a : Prop) => (b : Prop) => (ha : a) => (hb : b) => Iff.intro a b
  (a : Prop) => (b : Prop) => (ha : a) => (hb : b) => (a -> b) => b => ha
  (a : Prop) => (b : Prop) => (ha : a) => (hb : b) => a => hb
thm iff_of_false : (a:Prop)->(b:Prop)->(ha:Not a)->(hb:Not b)->Iff a b
  (a : Prop) => (b : Prop) => (ha : Not a) => (hb : Not b) => Iff.intro a b
  (a : Prop) => (b : Prop) => (ha : Not a) => (hb : Not b) => (a -> b) => Not.elim b a hb
  (a : Prop) => (b : Prop) => (ha : Not a) => (hb : Not b) => Not.elim a b ha
thm iff_true_left : (a:Prop)->(b:Prop)->(ha:a)->Iff (Iff a b) b
  (a : Prop) => (b : Prop) => (ha : a) => Iff.intro (Iff a b) b
  (a : Prop) => (b : Prop) => (ha : a) => (Iff a b -> b) => b => iff_of_true a b ha #0
  (a : Prop) => (b : Prop) => (ha : a) => Iff a b => Iff.mp a b #0 ha
thm iff_true_right : (a:Prop)->(b:Prop)->(ha:a)->Iff (Iff a b) b
  (a : Prop) => (b : Prop) => (ha : a) => Iff.intro (Iff a b) b
  (a : Prop) => (b : Prop) => (ha : a) => (Iff a b -> b) => b => iff_of_true a b ha #0
  (a : Prop) => (b : Prop) => (ha : a) => Iff a b => Iff.mp a b #0 ha
thm iff_false_left : (a:Prop)->(b:Prop)->(ha:Not a)->Iff (Iff a b) (Not b)
  (a : Prop) => (b : Prop) => (ha : Not a) => Iff.intro (Iff a b) (Not b)
  (a : Prop) => (b : Prop) => (ha : Not a) => (Iff a b -> Not b) => Not b => iff_of_false a b ha #0
  (a : Prop) => (b : Prop) => (ha : Not a) => Iff a b => Not.imp b a ha
  (a : Prop) => (b : Prop) => (ha : Not a) => Iff a b => Iff.mpr a b #0
thm iff_false_right : (a:Prop)->(b:Prop)->(ha:Not a)->Iff (Iff b a) (Not b)
  (a : Prop) => (b : Prop) => (ha : Not a) => Iff.trans (Iff b a) (Iff a b) (Not b)
  (a : Prop) => (b : Prop) => (ha : Not a) => Iff (Iff b a) (Iff a b) => iff_false_left a b ha
  (a : Prop) => (b : Prop) => (ha : Not a) => Iff.comm b a
thm of_iff_true : (a:Prop)->(h:Iff a True)->a
  (a : Prop) => (h : Iff a True) => Iff.mpr a True h True.intro 
thm iff_true_intro : (a:Prop)->(h:a)->Iff a True 
  (a : Prop) => (h : a) => iff_of_true a True h True.intro
thm not_of_iff_false : (p:Prop)->Iff p False->Not p
  (p : Prop) => Iff p False => Iff.mp p False #0
thm iff_false_intro : (a:Prop)->(h:Not a)->Iff a False
  (a : Prop) => (h : Not a) => iff_of_false a False h not_false
thm not_iff_false_intro : (a:Prop)->(h:a)->Iff (Not a) False 
  (a : Prop) => (h : a) => iff_false_intro (Not a)
  not_not_intro
thm not_true : Iff (Not True) False 
  iff_false_intro (Not True)
  not_not_intro True True.intro
thm not_false_iff : Iff (Not False) True 
  iff_true_intro (Not False) not_false
def Ne = (a:Sort(u))=>(x:a)=>(y:a)=>Not (Eq a x y)
thm new_of_not_iff : (a:Prop)->(b:Prop)->Not (Iff a b)->Ne Prop a b
  (a : Prop) => (b : Prop) => mt (Eq Prop a b) (Iff a b)
  Iff.of_eq
thm iff_iff_eq : (a:Prop)->(b:Prop)->Iff (Iff a b) (Eq Prop a b)
  (a : Prop) => (b : Prop) => Iff.intro (Iff a b) (Eq Prop a b)
  (a : Prop) => (b : Prop) => (Iff a b -> Eq Prop a b) => Iff.of_eq a b
  propext
thm eq_iff_iff : (a:Prop)->(b:Prop)->Iff (Eq Prop a b) (Iff a b)
  (a : Prop) => (b : Prop) => Iff.symm (Iff a b) (Eq Prop a b) 
  iff_iff_eq
thm eq_self_iff_true : (t:Sort(u))->(a:t)->Iff (Eq t a a) True
  (t : Sort(u)) => (a : t) => iff_true_intro (Eq t a a)
  (t : Sort(u)) => (a : t) => Eq.refl t a
thm ne_self_iff_false : (t:Sort(u))->(a:t)->Iff (Ne t a a) False 
  (t : Sort(u)) => (a : t) => not_iff_false_intro (Eq t a a)
  (t : Sort(u)) => (a : t) => Eq.refl t a
thm false_of_true_iff_false : (h : Iff True False)->False
  (h : Iff True False) => Iff.mp True False h True.intro
thm false_of_true_eq_false : (h:Eq Prop True False)->False
  (h : Eq Prop True False) => false_of_true_iff_false
  Iff.of_eq True False
thm true_eq_false_of_false : False->(Eq Prop True False)
  False.elim (Eq Prop True False)
thm iff_def : (a:Prop)->(b:Prop)->Iff (Iff a b) (And (a->b) (b->a))
  (a : Prop) => (b : Prop) => Iff.intro (Iff a b) (And (a->b) (b->a))
  (a : Prop) => (b : Prop) => (Iff a b -> And (a -> b) (b -> a)) => And (a -> b) (b -> a) => Iff.intro a b
  (a : Prop) => (b : Prop) => (Iff a b -> And (a -> b) (b -> a)) => And (a -> b) (b -> a) => (a -> b) => And.right (a->b) (b->a) #1
  (a : Prop) => (b : Prop) => (Iff a b -> And (a -> b) (b -> a)) => And (a -> b) (b -> a) => And.left (a->b) (b->a) #0
  (a : Prop) => (b : Prop) => Iff a b => And.intro (a->b) (b->a)
  (a : Prop) => (b : Prop) => Iff a b => (a -> b) => Iff.mpr a b #1
  (a : Prop) => (b : Prop) => Iff a b => Iff.mp a b #0
thm true_iff_false : Iff (Iff True False) False 
  iff_false_intro (Iff True False)
  (h:Iff True False)=>Iff.mp True False h True.intro
thm false_iff_true : Iff (Iff False True) False
  iff_false_intro (Iff False True)
  (h:Iff False True)=>Iff.mpr False True h True.intro
thm iff_not_self : (a:Prop)->Not (Iff a (Not a))
  (a : Prop) => Iff.elim a (Not a) False
  (a : Prop) => (a -> Not a) => (Not a -> a) => (ha : a) => #2 ha ha
  .giveup
thm iff_not_self : (a:Prop)->Not (Iff a (Not a))
  (a : Prop) => Iff.elim a (Not a) False
  (a : Prop) => (f : a -> Not a) => (g : Not a -> a) => (h : a -> False) => h (g h)
  (a : Prop) => (f : a -> Not a) => (g : Not a -> a) => (ha : a) => f ha ha
thm not_not_of_not_imp : (a:Prop)->(b:Prop)->Not (a->b)->Not (Not a)
  (a : Prop) => (b : Prop) => mt (Not a) (a->b)
  (a : Prop) => (b : Prop) => Not.elim a b
thm not_of_not_imp : (a:Prop)->(b:Prop)->Not (a->b)->Not b
  (a : Prop) => (b : Prop) => mt b (a->b)
  (a : Prop) => (b : Prop) => b => a => #1
thm imp_not_self : (a:Prop)->Iff (a->Not a) (Not a)
  (a : Prop) => Iff.intro (a->Not a) (Not a)
  (a : Prop) => ((a -> Not a) -> Not a) => Not a => a => #1
  (a : Prop) => (f : a -> Not a) => (ha : a) => f ha ha
thm imp_intro : (a:Prop)->(b:Prop)->(h:a)->b->a
  (a : Prop) => (b : Prop) => (h : a) => b => h
thm imp_imp_imp : (a:Prop)->(b:Prop)->(c:Prop)->(d:Prop)->(h0:c->a)->(h1:b->d)->(a->b)->(c->d)
  (a : Prop) => (b : Prop) => (c : Prop) => (d : Prop) => (h0 : c -> a) => (h1 : b -> d) => (h2 : a -> b) => (hc : c) => h1 (h2 (h0 hc)) 
thm imp_iff_right : (a:Prop)->(b:Prop)->(ha:a)->Iff (a->b) b
  (a : Prop) => (b : Prop) => (ha : a) => Iff.intro (a->b) b
  (a : Prop) => (b : Prop) => (ha : a) => ((a -> b) -> b) => b => a => #1
  (a : Prop) => (b : Prop) => (ha : a) => (a -> b) => #0 ha
thm imp_true_iff : (a:Sort(u))->Iff (a->True) True
  (a : Sort(u)) => Iff.intro (a->True) True
  (a : Sort(u)) => ((a -> True) -> True) => True => a => True.intro
  (a : Sort(u)) => (a -> True) => True.intro
thm false_imp_iff : (a:Prop)->Iff (False->a) True
  (a : Prop) => Iff.intro (False->a) True
  (a : Prop) => ((False -> a) -> True) => True => False.elim a
  (a : Prop) => (False -> a) => True.intro
thm true_imp_iff : (a:Prop)->Iff (True->a) a
  (a : Prop) => Iff.intro (True->a) a
  (a : Prop) => ((True -> a) -> a) => a => True => #1
  (a : Prop) => (True -> a) => #0 True.intro
thm imp_self : (a:Sort(u))->Iff (a->a) True
  (a : Sort(u)) => Iff.intro (a->a) True
  (a : Sort(u)) => ((a -> a) -> True) => True => id a
  (a : Sort(u)) => (a -> a) => True.intro
thm imp_false: (a:Prop)->Iff (a->False) (Not a)
  (a : Prop) => Iff.refl (Not a)
thm imp.swap : (a:Sort(u))->(b:Sort(v))->(c:Sort(w))->Iff (a->b->c) (b->a->c)
  (a : Sort(u)) => (b : Sort(v)) => (c : Sort(w)) => Iff.intro (a->b->c) (b->a->c)
  (a : Sort(u)) => (b : Sort(v)) => (c : Sort(w)) => ((a -> b -> c) -> b -> a -> c) => (b -> a -> c) => a => b => #2 #0 #1
  (a : Sort(u)) => (b : Sort(v)) => (c : Sort(w)) => (a -> b -> c) => b => a => #2 #0 #1
thm imp_not_comm : (a:Prop)->(b:Prop)->Iff (a->Not b) (b->Not a)
  (a : Prop) => (b : Prop) => Iff.intro (a->Not b) (b->Not a)
  (a : Prop) => (b : Prop) => ((a -> Not b) -> b -> Not a) => (b -> Not a) => a => b => #2 #0 #1
  (a : Prop) => (b : Prop) => (a -> Not b) => b => a => #2 #0 #1
thm imp_congr_left : (a:Prop)->(b:Prop)->(c:Prop)->Iff a b->Iff (a->c) (b->c)
  (a : Prop) => (b : Prop) => (c : Prop) => Iff a b => Iff.intro (a->c) (b->c)
  (a : Prop) => (b : Prop) => (c : Prop) => Iff a b => ((a -> c) -> b -> c) => (b -> c) => a => b => #2 #0
  (a : Prop) => (b : Prop) => (c : Prop) => Iff a b => ((a -> c) -> b -> c) => (b -> c) => Iff.mp a b #2
  (a : Prop) => (b : Prop) => (c : Prop) => Iff a b => (a -> c) => b => a => #2 #0
  (a : Prop) => (b : Prop) => (c : Prop) => Iff a b => (a -> c) => Iff.mpr a b #1
thm imp_congr_right : (a:Prop)->(b:Prop)->(c:Prop)->(h:a->Iff b c)->Iff (a->b) (a->c)
  (a : Prop) => (b : Prop) => (c : Prop) => (h : a -> Iff b c) => Iff.intro (a->b) (a->c)
  (a : Prop) => (b : Prop) => (c : Prop) => (h : a -> Iff b c) => ((a -> b) -> a -> c) => (a -> c) => a => (c -> b) => #0 (#2 #1)
  (a : Prop) => (b : Prop) => (c : Prop) => (h : a -> Iff b c) => ((a -> b) -> a -> c) => (a -> c) => a => Iff.mpr b c (h #0)
  (a : Prop) => (b : Prop) => (c : Prop) => (h : a -> Iff b c) => (a -> b) => a => (b -> c) => #0 (#2 #1)
  (a : Prop) => (b : Prop) => (c : Prop) => (h : a -> Iff b c) => (a -> b) => a => Iff.mp b c (h #0)
thm imp_congr_ctx : (a:Prop)->(b:Prop)->(c:Prop)->(d:Prop)->(h1:Iff a c)->(h2:c->Iff b d)->Iff (a->b) (c->d)
  (a : Prop) => (b : Prop) => (c : Prop) => (d : Prop) => (h1 : Iff a c) => (h2 : c -> Iff b d) => Iff.trans (a->b) (c->b) (c->d)
  (a : Prop) => (b : Prop) => (c : Prop) => (d : Prop) => (h1 : Iff a c) => (h2 : c -> Iff b d) => Iff (a -> b) (c -> b) => imp_congr_right c b d h2
  (a : Prop) => (b : Prop) => (c : Prop) => (d : Prop) => (h1 : Iff a c) => (h2 : c -> Iff b d) => imp_congr_left a c b h1
thm imp_congr : (a:Prop)->(b:Prop)->(c:Prop)->(d:Prop)->(h1:Iff a c)->(h2:Iff b d)->Iff (a->b) (c->d)
  (a : Prop) => (b : Prop) => (c : Prop) => (d : Prop) => (h1 : Iff a c) => (h2 : Iff b d) => imp_congr_ctx a b c d h1 
  (a : Prop) => (b : Prop) => (c : Prop) => (d : Prop) => (h1 : Iff a c) => (h2 : Iff b d) => c => h2
thm imp_iff_not : (a:Prop)->(b:Prop)->(hb:Not b)->Iff (a->b) (Not a)
  (a : Prop) => (b : Prop) => (hb : Not b) => imp_congr_right a b False 
  (a : Prop) => (b : Prop) => (hb : Not b) => a => iff_false_intro b hb
thm congrArg : (a:Sort(u))->(b:Sort(v))->(x:a)->(y:a)->(f:a->b)->Eq a x y->Eq b (f x) (f y) 
  (a : Sort(u)) => (b : Sort(v)) => (x : a) => (y : a) => (f : a -> b) => Eq.rec a x ((z:a)=>Eq a x z =>Eq b (f x) (f z)) (Eq.refl b (f x)) y
thm eq_iff_eq_cancel_left : (a:Sort(u))->(x:a)->(y:a)->Iff ((z:a)->Iff (Eq a z x) (Eq a z y)) (Eq a x y)
  (a : Sort(u)) => (x : a) => (y : a) => Iff.intro ((z : a) -> Iff (Eq a z x) (Eq a z y)) (Eq a x y)
  (a : Sort(u)) => (x : a) => (y : a) => (((z : a) -> Iff (Eq a z x) (Eq a z y)) -> Eq a x y) => Eq a x y => (z : a) => Iff.intro (Eq a z x) (Eq a z y)
  (a : Sort(u)) => (x : a) => (y : a) => (((z : a) -> Iff (Eq a z x) (Eq a z y)) -> Eq a x y) => Eq a x y => (z : a) => (Eq a z x -> Eq a z y) => Eq a z y => Eq.trans a z y x #0 (Eq.symm a x y #3) 
  (a : Sort(u)) => (x : a) => (y : a) => (((z : a) -> Iff (Eq a z x) (Eq a z y)) -> Eq a x y) => Eq a x y => (z : a) => Eq a z x => Eq.trans a z x y #0 #2 
  (a : Sort(u)) => (x : a) => (y : a) => ((z : a) -> Iff (Eq a z x) (Eq a z y)) => Iff.mp (Eq a x x) (Eq a x y) (#0 x) 
  (a : Sort(u)) => (x : a) => (y : a) => ((z : a) -> Iff (Eq a z x) (Eq a z y)) => Eq.refl a x
thm Eq.mp : (a:Sort(u))->(b:Sort(u))->Eq Sort(u) a b->a->b
  (a : Sort(u)) => (b : Sort(u)) => Eq Sort(u) a b => Eq.rec Sort(u) a ((x:Sort(u))=>Eq Sort(u) a x=>(a->x)) (id a) b #0
thm Eq.mpr : (a:Sort(u))->(b:Sort(u))->Eq Sort(u) a b->b->a
  (a : Sort(u)) => (b : Sort(u)) => Eq Sort(u) a b => Eq.rec Sort(u) a ((x:Sort(u))=>Eq Sort(u) a x=>(x->a)) (id a) b #0
thm eq_iff_eq_cancel_right : (a:Sort(u))->(x:a)->(y:a)->Iff ((z:a)->Iff (Eq a x z) (Eq a y z)) (Eq a x y)
  (a : Sort(u)) => (x : a) => (y : a) => Iff.intro ((z : a) -> Iff (Eq a x z) (Eq a y z)) (Eq a x y)
  (a : Sort(u)) => (x : a) => (y : a) => (((z : a) -> Iff (Eq a x z) (Eq a y z)) -> Eq a x y) => Eq a x y => (z : a) => Iff.intro (Eq a x z) (Eq a y z)
  (a : Sort(u)) => (x : a) => (y : a) => (((z : a) -> Iff (Eq a x z) (Eq a y z)) -> Eq a x y) => Eq a x y => (z : a) => (Eq a x z -> Eq a y z) => Eq.trans a x y z #2
  (a : Sort(u)) => (x : a) => (y : a) => (((z : a) -> Iff (Eq a x z) (Eq a y z)) -> Eq a x y) => Eq a x y => (z : a) => Eq.trans a y x z (Eq.symm a x y #1)
  (a : Sort(u)) => (x : a) => (y : a) => ((z : a) -> Iff (Eq a x z) (Eq a y z)) => Iff.mpr (Eq a x y) (Eq a y y) (#0 y)
  (a : Sort(u)) => (x : a) => (y : a) => ((z : a) -> Iff (Eq a x z) (Eq a y z)) => Eq.refl a y
