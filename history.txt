def Prop = Sort(0)
def Imp = (a:Prop)=>(b:Prop)=>(a->b)
def Iff : Prop -> Prop -> Prop
def Iff.intro : (a:Prop)->(b:Prop)->(a->b)->(b->a)->Iff a b
def Iff.mp : (a:Prop)->(b:Prop)->Iff a b->a->b
def Iff.mpr: (a:Prop)->(b:Prop)->Iff a b->b->a
thm Iff.refl : (a:Prop)->Iff a a
(a:Prop)=>Iff.intro a a
(a:Prop)=>(h: a->a)=>h
(a:Prop)=>(h:a)=>h
def And : Prop -> Prop -> Prop
def And.intro : (a:Prop)->(b:Prop)->a->b->And a b
def And.left : (a:Prop)->(b:Prop)->And a b->a
def And.right : (a:Prop)->(b:Prop)->And a b->b
def Or : Prop -> Prop -> Prop
def Or.inl : (a:Prop)->(b:Prop)->a->Or a b
def Or.inr : (a:Prop)->(b:Prop)->b->Or a b
def Or.elim : (a:Prop)->(b:Prop)->(c:Prop)->Or a b->(a->c)->(b->c)->c
def False : Prop
def False.rec : (a:False->Sort(u))->(b:False)->(a b)
def False.elim = (a:Sort(u))=>(b:False)=>False.rec (False=>a) b
def True : Prop
def True.intro : True
def True.rec : (a:True->Sort(u))->(a True.intro)->(c:True)->a c
def Not = (a:Prop)=>(a->False) 
def Forall = (a:Sort(u))=>(b:a->Prop)=>((c:a)->b c)
def Exists : (a:Sort(u))->(a->Prop)->Prop
def Exists.intro : (a:Sort(u))->(b:a->Prop)->(c:a)->b c->Exists a b
def Exists.elim : (a : Sort(u)) -> (b : a -> Prop) -> (c : Prop) -> Exists a b -> ((e : a) -> b e -> c) -> c
def id = Sort(u)=>(a:#0)=>a
thm absurd : (a: Prop) -> (b: Sort(u)) -> (h1: a) -> (h2: Not a) -> b
(a: Prop) => (b: Sort(u)) => (h1 : a) => (h2 : Not a) => False.elim b 
(a : Prop) => (b : Sort(u)) => (h1 : a) => (h2 : Not a) => h2 h1
def Eq : (a : Sort(u)) -> a -> a -> Prop
def Eq.refl : (a : Sort(u)) -> (b : a) -> Eq a b b
(a : Sort(u_1)) -> (b : a) -> (motive : (c : a) -> Eq a b c -> Sort(u)) -> motive b (Eq.refl a b) -> (d: a) -> (t: Eq a b d) -> motive d t
def Eq.rec : (a : Sort(u_1)) -> (b : a) -> (motive : (c : a) -> Eq a b c -> Sort(u)) -> motive b (Eq.refl a b) -> (d: a) -> (t: Eq a b d) -> motive d t
thm Eq.symm : (a: Sort(u)) -> (x : a) -> (y : a) -> Eq a x y -> Eq a y x
(a : Sort(u)) => (x : a) => (y : a) => Eq a x y => Eq.rec a x ((b : a) => Eq a x b => Eq a b x) (Eq.refl a x) y #0  
thm Eq.trans : (a : Sort(u)) -> (x : a) -> (y : a) -> (z : a) -> Eq a x y -> Eq a y z -> Eq a x z 
(a : Sort(u)) => (x : a) => (y : a) => (z : a) => Eq a x y => Eq a y z => Eq.rec a y ((b : a) => Eq a y b => Eq a x b) #1 z #0
thm Or.resolve_left : (a : Prop) -> (b : Prop) -> (h : Or a b) -> (na : Not a) -> b 
(a : Prop) => (b : Prop) => (h : Or a b) => (na : Not a) => Or.elim a b b h
(a : Prop) => (b : Prop) => (h : Or a b) => (na : Not a) => (a -> b) => id b
(a : Prop) => (b : Prop) => (h : Or a b) => (na : Not a) => a => absurd a b #0 na
thm Or.resolve_right : (a : Prop) -> (b : Prop) -> (h : Or a b) -> (nb : Not b) -> a
(a : Prop) => (b : Prop) => (h : Or a b) => (nb : Not b) => Or.elim a b a h
(a : Prop) => (b : Prop) => (h : Or a b) => (nb : Not b) => (a -> a) => b => absurd b a #0 nb
(a : Prop) => (b : Prop) => (h : Or a b) => (nb : Not b) => id a
thm Or.neg_resolve_left : (a : Prop) -> (b : Prop) -> (h : Or (Not a) b) -> (ha : a) -> b
(a : Prop) => (b : Prop) => (h : Or (Not a) b) => (ha : a) => Or.elim (Not a) b b h 
(a : Prop) => (b : Prop) => (h : Or (Not a) b) => (ha : a) => (Not a -> b) => id b
(a : Prop) => (b : Prop) => (h : Or (Not a) b) => (ha : a) => Not a => absurd a b ha #0
thm Or.neg_resolve_right : (a : Prop) -> (b : Prop) -> (h : Or a (Not b)) -> (hb : b) -> a
(a : Prop) => (b : Prop) => (h : Or a (Not b)) => (hb : b) => Or.elim a (Not b) a h
(a : Prop) => (b : Prop) => (h : Or a (Not b)) => (hb : b) => (a -> a) => Not b => absurd b a hb #0
(a : Prop) => (b : Prop) => (h : Or a (Not b)) => (hb : b) => a => #0
